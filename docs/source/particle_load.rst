.. _particle_load:

==============================================
Create particle load and ic_gen parameter file
==============================================


Overview
--------
The "particle load" is the unperturbed distribution of particles (at redshift
infinity), which `ic_gen` then modifies into the perturbed distribution at
the finite redshift of the ICs.

For a uniform-volume DM-only simulation, this is in principle as trivial as a
periodic lattice of particles (in practice, one may instead use a "glass"
distribution, generally in a repeating pattern). It is possible to create
such particle loads with zoom-setup, but it is not recommended for production
runs because more sophisticated tools exist for this purpose, in partiular
the `monofonIC <https://bitbucket.org/ohahn/monofonic/src/master/>`_ code.

For zoom simulations, the particle load has a more complicated structure:
the target region is populated with high-resolution particles, with particle
masses gradually increasing outside it. The extent of the target region is
specified by the input mask (see :ref:`zoom mask <make_mask>`), which must be
generated before creating the particle load.

A more detailed description of how the particle load is generated can be
found :ref:`here <particle_load_algorithm>`.

Alongside the particle load file(s), a parameter file for `ic_gen` (v6.9) is
automatically generated, as well as a SLURM submit script. Submitting the
`ic_gen` run is then as simple as invoking

.. code-block:: bash

    $ sbatch < submit.sh

within the output directory.


Instructions
------------
The particle load generator is located in the ``particle_load`` directory.
To run it, first copy an appropriate template parameter file in
``template_param_files``
to a location of your choice, e.g. ``param_files/suite_zoom_vr17_res1.yml``.
You can use the master template file (``template.yml``) that contains all
available options, or the shorter ``template_uniform.yml`` or
``template_zoom.yml`` that only contain options relevant for unifor-volume
and zoom simulations, respectively. Then adapt this copy as needed (see
below). Finally, create the particle load with

.. code-block:: bash

    $ python3 generate_particle_load.py [your parameter file]

The particle load will be saved in Fortran format in the specified output
directory, if necessary split into multiple files to be compatible with the
needs of `ic_gen`. An appropriately configured `ic_gen` parameter file will
also be created, alongside with a SLURM submit script to initiate the `ic_gen`
run as the next step.

Parameter file
--------------
The parameter file is written in ```YAML`` format and contains a number of
options in the form of

.. code-block:: bash

    name:      value

A short summary of all available parameters is provided in the master template
file (``template_param_files/template.yml``); a more detailed description
is provided :ref:`here <particle_load_algorithm>`.

At minimum, the following values should be adjusted:

* ``sim_name``: A label for the ICs, used amongst others as base name for the
  ICs files.
* ``target_mass``: The desired mass of high-resolution particles in M_Sun.
  Due to quantization constraints, the actually realized particle mass will
  in general differ slightly from this value. For hydro simulations, this
  corresponds by default to the DM-only equivalent particle mass.
* ``icgen_object_dir``: The base directory for all ICs to be generated for
  this object. Output will be stored within a subdirectory ``[sim_name]``.
  In the :ref:`default structure example <structure>`, this would be e.g.
  ``suite/ICs/ic_gen/VR17``.
* ``mask_file``: For zoom simulations, the mask file generated by
  ``make_mask.py``. It can either be a simple file name within
  ``icgen_object_dir``, or the full path to a mask file anywhere on the system.
* ``panphasian_descriptor``: The Panphasia field descriptor that encodes the
  phases of the parent simulation (see
  `Jenkins 2013 <https://arxiv.org/abs/1306.5968>`_).
* ``icgen_runtime_hours``: The maximum runtime for the `ic_gen` job.
* ``icgen_module_setup``: The file to source to set up the appropriate
  environment for `ic_gen`, if necessary.

If the `ic_gen` executable and power spectra were not copied to the default
location (see :ref:`Installation <installation>` and :ref:`Default file
structure <structure>`), the following two parameters must also be adjusted:
  
* ``icgen_exec``: Location of the `ic_gen` executable, either absolute or
  relative to the output directory.
* ``icgen_powerspec_dir``: Directory containing the power spectrum file, either
  absolute or relative to the output directory.

Finally, if the local system values were not specified in ``local.py`` during
:ref:`installation <installation>`, you should adjust the following:

* ``slurm_partition``: Name of the partition to use for SLURM submission of
  `ic_gen` job.
* ``slurm_account``: Name of the account to use for SLURM submission of
  `ic_gen` job.
* ``slurm_email``: Email address to use for SLURM job notifications.
* ``memory_per_core``: Available memory per core on the system [GB].
* ``num_cores_per_node``: Number of cores per node.

  
Detailed description
--------------------
See :ref:`here <particle_load_algorithm>`.



.. toctree::
   :hidden:

   particle_load_algorithm
